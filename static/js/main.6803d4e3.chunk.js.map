{"version":3,"sources":["colors.js","lib/slug.js","icons/ramda.jsx","Example.jsx","Solution.jsx","Solutions.jsx","App.jsx","data.js","index.js"],"names":["colors","slug","pipe_default","toLower_default","a","replace_default","unslug","Icon","react_default","createElement","xmlns","width","height","viewBox","fill","d","Pre","styled","pre","_templateObject","Example","_ref","data","react","code","es","Object","assign","defaultProps","language","theme","_ref2","className","style","tokens","getLineProps","getTokenProps","map","line","i","key","token","output","LazyMarkdown","React","lazy","__webpack_require__","e","then","t","bind","fadeUp","keyframes","Solution_templateObject","scaleCenter","_templateObject2","Script","p","_templateObject3","Code","_templateObject4","Strong","strong","_templateObject5","Title","h1","_templateObject6","Link","_templateObject7","Notation","div","_templateObject8","Section","_templateObject9","SectionContent","_templateObject10","SectionCode","_templateObject11","Solution","name","target","rel","href","resource","notation","fallback","renderers","children","inlineCode","_ref3","_ref4","source","description","hasPath_default","src_Example","example","Root","Solutions_templateObject","Solutions","func","index","src_Solution","App_templateObject","Header","App_templateObject2","SelectWrapper","App_templateObject3","SelectWrapperBig","App_templateObject4","Sentence","App_templateObject5","Description","App_templateObject6","Content","main","App_templateObject7","customStyles","indicatorSeparator","display","objectSpread","primary","primary75","primary50","primary25","App","props","params","match","history","types","uniq_default","map_default","prop_default","typeOptions","v","label","_useState","useState","type","_useState2","slicedToArray","setType","_useState3","action","_useState4","setAction","actionsByType","filter_default","propEq_default","actionOptions","typeSelected","length_default","actionSelected","optionAction","find_default","ramda","react_select_esm","openMenuOnFocus","styles","isOptionSelected","option","autoFocus","placeholder","onChange","push","options","value","src_Solutions","src_data","resouce","normalize","css","src_templateObject","createBrowserHistory","render","core_browser_esm","react_router_dom","hashType","react_router","path","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.6803d4e3.chunk.js","sourcesContent":["export default {\n  black: '#2a2734',\n  white: '#FFFFFF',\n  grey: 'rgba(0, 0, 0, 0.05)',\n  blue: '#00c0ff'\n}\n","import R from 'ramda'\n\nexport const slug = R.pipe(\n  R.toLower,\n  R.replace(/\\s+/g, \"-\"), // Replace spaces with -\n  R.replace(/^-+/, \"\"), // Trim - from start of text\n  R.replace(/-+$/, \"\") // Trim - from end of text\n);\n\nexport const unslug = R.pipe(\n  R.toLower,\n  R.replace(/-/g, \" \") // Replace spaces with -\n);\n","import React from 'react'\n\nconst Icon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\".84em\" height=\"1em\" viewBox=\"0 0 256 306\">\n    <path fill=\"#11100E\" d=\"M21.971 25.115C35.864 10.021 55.79.372 76.406.06c15.773-.627 31.716 3.773 44.812 12.613 16.935 11.085 29.3 28.817 34.118 48.441 1.032 3.748.744 8.344 3.982 11.073 6.15 1.475 12.574.405 18.79 1.54 15.85 3.8 30.41 12.653 41.168 24.887a33.165 33.165 0 0 1 6.124 9.61c8.109 16.7 9.388 35.515 12.757 53.508 3.12 24.116 7.377 48.063 11.36 72.049 3.63 22.197 7.377 44.642 6.293 67.204-5.014-1.867-9.349-5.706-11.085-10.837-2.494-8.134-3.278-16.648-4.31-25.056-.391-3.552-3.342-6.96-7.155-6.568-5.536-.092-7.951 6.907-6.28 11.386 2.833 6.672 7.978 11.947 12.77 17.235 2.624 2.794 3.63 6.607 5.719 9.754 2.703 3.238 6.594 5.079 10.406 6.685-1.358.81-2.467 2.35-4.243 2.115-5.758.274-11.517-.04-17.275.052-7.077-.078-14.232.797-21.23-.679-9.793-24.325-21.035-48.037-31.73-71.983a2105.896 2105.896 0 0 0-16.072-35.933c-6.15-13.227-11.425-26.845-17.954-39.89-.966-4.57-3.656-8.447-5.418-12.704-2.703-6.672-5.72-13.24-9.166-19.56-17.118 31.964-33.505 64.307-50.074 96.544-13.932 27.747-29.117 54.892-41.9 83.213-12.992-.092-25.97-.392-38.962-.483 33.674-63.405 66.368-127.32 99.481-191.025 2.899-5.68 6.046-11.255 8.291-17.235-6.398 1.854-12.221 5.419-18.867 6.49-13.736 2.794-27.76-.131-40.62-5.12 16.216-14.884 39.34-20.473 60.898-19.402-1.815-5.81-4.427-11.399-8.2-16.204 4.478-8.134 11.673-14.062 18.658-19.938-10.119-1.188-18.802 5.615-25.004 12.861-3.852-2.637-7.926-4.922-12.143-6.894.692-7.364 3.93-14.01 7.351-20.434-8.187 1.933-13.03 9.832-15.394 17.353-5.132-.77-10.328-.849-15.512-.535-.9-5.81-.94-11.7-.405-17.55-6.437 3.892-6.241 12.379-6.293 18.986-4.831 1.763-9.44 4.06-13.854 6.685-2.611-4.008-4.53-8.383-6.463-12.744-3.199 5.628-.77 12.248 1.515 17.745a111.57 111.57 0 0 0-7.156 11.947c-3.42-1.723-6.737-3.63-10.093-5.484.927 4.805 4.061 8.657 8.109 11.23-1.123 5.026-1.593 10.144-1.632 15.276-3.421.313-6.855.522-10.29.849 2.808 3.016 6.856 3.72 10.76 4.047 1.005 4.113 2.22 8.187 3.708 12.156-2.128 2.076-4.27 4.126-6.307 6.294 2.912-.431 5.758-1.136 8.553-2.024 3.603 3.382 8.03 5.615 12.273 8.07-.209.992-.64 2.976-.848 3.969 1.423-.927 2.833-1.854 4.256-2.782 8.017 2.312 16.752 3.448 24.809.653 4.948-1.553 8.957-5.092 13.84-6.776-1.828 8.513-8.97 14.937-16.556 18.58-11.086 5.249-23.986 3.786-35.15-.405-7.638-2.206-13.788-7.651-18.867-13.553C6.55 110.117 1.132 98.365.166 86.039-1.296 63.882 6.97 41.397 21.971 25.115zM184.65 146.193c-.796 4.14-.64 8.54.731 12.535 3.63 10.028 14.22 14.69 23.033 19.233-.653-2.22-1.293-4.44-1.92-6.66-11.411-1.161-17.861-17.456-8.93-25.382-1.097-2.56-2.207-5.118-3.304-7.69-3.695 1.853-8.343 3.603-9.61 7.964zm14.833 6.933c-.927 4.649-.013 10.355 5.157 12-1.24-4.152-2.154-8.683-5.157-12z\" />\n  </svg>\n)\n\nexport default Icon\n\n","import React, { Fragment } from 'react'\nimport styled from '@emotion/styled'\nimport Highlight, { defaultProps } from 'prism-react-renderer'\nimport theme from 'prism-react-renderer/themes/nightOwl'\n\nconst Pre = styled.pre`\n  margin: 0;\n  border-radius: 8px;\n  box-shadow:\n    rgba(0, 0, 0, 0.8) 0px 20px 40px -25px,\n    rgba(0, 0, 0, 0.1) 0px 20px 40px   0px;\n`\n\nconst Example = ({ data }) => {\n  return (\n    <Fragment>\n      {data.code && (\n        <Highlight {...defaultProps} code={data.code} language='js' theme={theme} >\n          {({ className, style, tokens, getLineProps, getTokenProps }) => (\n            <Pre className={className} style={style}>\n              {tokens.map((line, i) => (\n                <div {...getLineProps({ line, key: i })}>\n                  {line.map((token, key) => (\n                    <span {...getTokenProps({ token, key })} />\n                  ))}\n                </div>\n              ))}\n              {data.output && <div>{data.output}</div>}\n            </Pre>\n          )}\n        </Highlight>\n      )}\n    </Fragment>\n  )\n}\n\nexport default Example\n","import React, { Suspense } from 'react'\nimport styled from '@emotion/styled'\nimport * as R from 'ramda'\nimport { keyframes } from 'emotion'\n\nimport colors from './colors'\nimport Example from './Example.jsx'\nconst LazyMarkdown = React.lazy(() => import('react-markdown'))\n\nconst fadeUp = keyframes`\n  0%  {\n    transform: translate3d(0, 40px, 0);\n    opacity: 0;\n  }\n\n  100% {\n    transform: translate3d(0, 0, 0);\n    opacity: 1;\n  }\n`\nconst scaleCenter = keyframes`\n  0%  {\n    transform: scale(0.9);\n    opacity: 0;\n  }\n\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n`\n\nconst Script = styled.p`\n  background-color: ${colors.grey};\n`\n\nconst Code = styled.code`\n  background-color: ${colors.grey};\n  padding: 2px 4px;\n  margin: 0 -2px;\n  border-radius: 2px;\n`\n\nconst Strong = styled.strong`\n  color: black;\n  font-weight: bold;\n`\n\nconst Title = styled.h1`\n  margin-top: 0;\n  text-transform: capitalize;\n`\n\nconst Link = styled.a`\n  display: block;\n  margin-bottom: 16px;\n`\n\nconst Notation = styled.div`\n  display: inline-block;\n  padding: 6px 14px;\n  border-radius: 2px;\n  background-color: ${colors.grey};\n  margin-bottom: 24px;\n`\n\nconst Section = styled.div`\n  display: flex;\n`\n\nconst SectionContent = styled.div`\n  margin-right: 5vw;\n  flex: 1;\n  animation: ${fadeUp} 500ms cubic-bezier(0.175, 0.885, 0.32, 1.15);\n`\n\nconst SectionCode = styled.div`\n  flex: 1;\n\n  & > pre {\n    padding: 12px 0;\n\n    animation: ${scaleCenter} 500ms cubic-bezier(0.175, 0.885, 0.32, 1.15);\n    transform-origin: center center;\n  }\n`\n\nconst Solution = ({ data }) => {\n  return (\n    <Section>\n      <SectionContent>\n        <Title>{data.name}</Title>\n        <Link target='_blank' rel='noopener noreferrer' href={data.resource} >\n          {data.resource}\n        </Link>\n        {data.notation && <Notation>{data.notation}</Notation>}\n        <Suspense fallback={<div>Loading...</div>}>\n          <LazyMarkdown\n            renderers={{\n              code: ({ children }) => <Script>{children}</Script>,\n              inlineCode: ({ children }) => <Code>{children}</Code>,\n              strong: ({ children }) => <Strong>{children}</Strong>\n            }}\n            source={data.description}\n          />\n        </Suspense>\n      </SectionContent>\n      <SectionCode>\n        {R.hasPath(['example'], data) && <Example data={data.example} />}\n      </SectionCode>\n    </Section>\n  )\n}\n\nexport default Solution\n","import React, { Fragment } from 'react'\nimport styled from '@emotion/styled'\nimport Solution from './Solution.jsx'\n\nconst Root = styled.div``\n\nconst Solutions = ({ data }) => {\n  if (!data || !data.func) {\n    return null\n  }\n\n  return (\n    <Root>\n      {data.func.map((func, index) => {\n        return (\n          <Fragment key={index}>\n            <Solution data={func} />\n          </Fragment>\n        )\n      })}\n    </Root>\n  )\n}\n\nexport default Solutions\n","import React, { Suspense, Fragment, useState } from 'react'\nimport styled from '@emotion/styled'\nimport { keyframes } from 'emotion'\nimport Select from 'react-select'\nimport * as R from 'ramda'\n\nimport colors from './colors.js'\nimport { slug, unslug } from './lib/slug'\nimport RamdaIcon from './icons/ramda.jsx'\nimport Solutions from './Solutions.jsx'\n\nconst fadeUp = keyframes`\n  0%  {\n    opacity: 0;\n  }\n\n  100% {\n    opacity: 1;\n  }\n`\n\nconst Header = styled.div`\n  padding: 8vh 8vw 12vh;\n`\n\nconst SelectWrapper = styled.div`\n  min-width: 200px;\n  margin: 0 20px;\n`\n\nconst SelectWrapperBig = styled.div`\n  flex: 1;\n  min-width: 320px;\n  margin-left: 20px;\n`\n\nconst Sentence = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  width: 100%;\n  font-size: 24px;\n  line-height: 1.25;\n`\n\nconst Description = styled.div`\n  opacity: 0.6;\n  font-size: 12px;\n  margin-bottom: 3vh;\n`\n\nconst Content = styled.main`\n  padding: 8vh 8vw 15vh;\n  background-color: rgba(0, 0, 0, 0.03);\n  animation: ${fadeUp} 500ms cubic-bezier(0.175, 0.885, 0.32, 1.15);\n`\n\nconst customStyles = {\n  indicatorSeparator: () => ({\n    display: 'none'\n  })\n}\n\nconst theme = (theme) => ({\n  ...theme,\n  colors: {\n    ...theme.colors,\n    primary: colors.black,\n    primary75: colors.grey,\n    primary50: colors.grey,\n    primary25: colors.grey\n  }\n})\n\nconst App = props => {\n  const {\n    data,\n    match: { params },\n    history\n  } = props\n\n  const types = R.uniq(R.map(R.prop('type'), data))\n  const typeOptions = R.map(v => ({ label: v }), types)\n\n  const [type, setType] = useState({ label: params.type })\n  const [action, setAction] = useState({\n    label: params.action && unslug(params.action)\n  })\n\n  const actionsByType = R.filter(R.propEq('type', type.label), data)\n  const actionOptions = R.map(v => ({ label: v.action, ...v }), actionsByType)\n\n  const typeSelected = type && R.length(actionsByType) !== 0\n  const actionSelected = action && R.length(actionsByType) !== 0\n\n  const optionAction = R.find(a => a.label === action.label, actionOptions)\n\n  return (\n    <Fragment>\n    <Header>\n      <Description>\n        Find the right method you need in Ramda <RamdaIcon />\n      </Description>\n      <Sentence>\n        I have a\n        <SelectWrapper>\n          <Select\n            openMenuOnFocus\n            styles={customStyles}\n            isOptionSelected={option => option === type}\n            autoFocus={!typeSelected}\n            placeholder='Select type'\n            onChange={option => {\n              setAction({})\n              setType(option)\n              history.push('/' + option.label)\n            }}\n            options={typeOptions}\n            value={type}\n            theme={theme}\n          />\n        </SelectWrapper>\n        {typeSelected && (\n          <Fragment>\n            I would like to\n            <SelectWrapperBig>\n              <Select\n                styles={customStyles}\n                autoFocus={typeSelected && !actionSelected}\n                isOptionSelected={option => option === action}\n                placeholder='Select an action'\n                options={actionOptions}\n                onChange={option => {\n                  history.push('/' + params.type + '/' + slug(option.label))\n                  setAction(option)\n                }}\n                value={action}\n                theme={theme}\n              />\n            </SelectWrapperBig>\n          </Fragment>\n        )}\n      </Sentence>\n    </Header>\n    {optionAction && (\n      <Suspense fallback={<div>Loading...</div>}>\n      <Content>\n        <Solutions data={optionAction} />\n      </Content>\n      </Suspense>\n    )}\n    </Fragment>\n  )\n}\n\nexport default App\n","export default [\n  {\n    type: 'list',\n    action: 'change every value',\n    func: [\n      {\n        name: 'map',\n        notation: 'Functor f => (a -> b) -> f a -> f b',\n        description:\n          \"Takes a function and\\na [functor](https://github.com/fantasyland/fantasy-land#functor),\\napplies the function to each of the functor's values, and returns\\na functor of the same shape.\\n\\nRamda provides suitable `map` implementations for `Array` and `Object`,\\nso this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\\n\\nDispatches to the `map` method of the second argument, if present.\\n\\nActs as a transducer if a transformer is given in list position.\\n\\nAlso treats functions as functors and will compose them together.\",\n        resource: 'https://ramdajs.com/docs/#map',\n        example: {\n          code:\n            '  const double = x => x * 2;\\n  R.map(double, [1, 2, 3]);\\n',\n          output: '\\n  [2, 4, 6]\\n'\n        }\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'pull a property off each value',\n    func: [\n      {\n        name: 'pluck',\n        resource: 'https://ramdajs.com/docs/#pluck'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action:\n      'receive the index of each element along with the value when iterating over a list',\n    func: [\n      {\n        name: 'addIndex',\n        resource: 'https://ramdajs.com/docs/#addIndex'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'pull a property off each value',\n    func: [\n      {\n        name: 'pluck',\n        notation: 'Functor f => k -> f {k: v} -> f v',\n        description:\n          'Returns a new list by plucking the same named property off all objects in\\nthe list supplied.\\n\\n`pluck` will work on\\nany [functor](https://github.com/fantasyland/fantasy-land#functor) in\\naddition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.',\n        resource: 'https://ramdajs.com/docs/#pluck'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'select values based on custom logic',\n    func: [\n      {\n        name: 'filter',\n        notation: 'Filterable f => (a -> Boolean) -> f a -> f a',\n        description:\n          'Takes a predicate and a `Filterable`, and returns a new filterable of the\\nsame type containing the members of the given filterable which satisfy the\\ngiven predicate. Filterable objects include plain objects or any object\\nthat has a filter method such as `Array`.\\n\\nDispatches to the `filter` method of the second argument, if present.\\n\\nActs as a transducer if a transformer is given in list position.',\n        resource: 'https://ramdajs.com/docs/#filter'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'select values from a specific index range',\n    func: [\n      {\n        name: 'slice',\n        notation: 'Number -> Number -> [a] -> [a]',\n        description:\n          'Returns the elements of the given list or string (or object with a `slice`\\nmethod) from `fromIndex` (inclusive) to `toIndex` (exclusive).\\n\\nDispatches to the `slice` method of the third argument, if present.',\n        resource: 'https://ramdajs.com/docs/#slice'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'select values from the start',\n    func: [\n      {\n        name: 'take',\n        notation: 'Number -> [a] -> [a]',\n        description:\n          'Returns the first `n` elements of the given list, string, or\\ntransducer/transformer (or object with a `take` method).\\n\\nDispatches to the `take` method of the second argument, if present.',\n        resource: 'https://ramdajs.com/docs/#take'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'select values from the start based on custom logic',\n    func: [\n      {\n        name: 'takeWhile',\n        notation: '(a -> Boolean) -> [a] -> [a]',\n        description:\n          'Returns a new list containing the first `n` elements of a given list,\\npassing each value to the supplied predicate function, and terminating when\\nthe predicate function returns `false`. Excludes the element that caused the\\npredicate function to fail. The predicate function is passed one argument:\\n*(value)*.\\n\\nDispatches to the `takeWhile` method of the second argument, if present.\\n\\nActs as a transducer if a transformer is given in list position.',\n        resource: 'https://ramdajs.com/docs/#takeWhile'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'select values from the end',\n    func: [\n      {\n        name: 'takeLast',\n        notation: 'Number -> [a] -> [a]',\n        description:\n          'Returns a new list containing the last `n` elements of the given list.\\nIf `n > list.length`, returns a list of `list.length` elements.',\n        resource: 'https://ramdajs.com/docs/#takeLast'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'select values from the end based on custom logic',\n    func: [\n      {\n        name: 'takeLastWhile',\n        notation: '(a -> Boolean) -> [a] -> [a]',\n        description:\n          'Returns a new list containing the last `n` elements of a given list, passing\\neach value to the supplied predicate function, and terminating when the\\npredicate function returns `false`. Excludes the element that caused the\\npredicate function to fail. The predicate function is passed one argument:\\n*(value)*.',\n        resource: 'https://ramdajs.com/docs/#takeLastWhile'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'remove the last value',\n    func: [\n      {\n        name: 'init',\n        notation: '[a] -> [a]',\n        description:\n          'Returns all but the last element of the given list or string.',\n        resource: 'https://ramdajs.com/docs/#init'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'remove specific values',\n    func: [\n      {\n        name: 'without',\n        notation: '[a] -> [a] -> [a]',\n        description:\n          'Returns a new list without values in the first argument.\\n[`R.equals`](#equals) is used to determine equality.\\n\\nActs as a transducer if a transformer is given in list position.',\n        resource: 'https://ramdajs.com/docs/#without'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'remove values based on custom logic',\n    func: [\n      {\n        name: 'reject',\n        notation: 'Filterable f => (a -> Boolean) -> f a -> f a',\n        description:\n          'The complement of [`filter`](#filter).\\n\\nActs as a transducer if a transformer is given in list position. Filterable\\nobjects include plain objects or any object that has a filter method such\\nas `Array`.',\n        resource: 'https://ramdajs.com/docs/#reject'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'dedupe, remove all duplicates',\n    func: [\n      {\n        name: 'uniq',\n        notation: '[a] -> [a]',\n        description:\n          'Returns a new list containing only one copy of each element in the original\\nlist. [`R.equals`](#equals) is used to determine equality.',\n        resource: 'https://ramdajs.com/docs/#uniq'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'dedupe, remove all duplicates based on custom logic',\n    func: [\n      {\n        name: 'uniqWith',\n        notation: '((a, a) -> Boolean) -> [a] -> [a]',\n        description:\n          'Returns a new list containing only one copy of each element in the original\\nlist, based upon the value returned by applying the supplied predicate to\\ntwo list elements. Prefers the first item if two items compare equal based\\non the predicate.',\n        resource: 'https://ramdajs.com/docs/#uniqWith'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'remove values based on index',\n    func: [\n      {\n        name: 'remove',\n        notation: 'Number -> Number -> [a] -> [a]',\n        description:\n          'Removes the sub-list of `list` starting at index `start` and containing\\n`count` elements. _Note that this is not destructive_: it returns a copy of\\nthe list with the changes.\\n<small>No lists have been harmed in the application of this function.</small>',\n        resource: 'https://ramdajs.com/docs/#remove'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'remove values from the start',\n    func: [\n      {\n        name: 'drop',\n        notation: 'Number -> [a] -> [a]',\n        description:\n          'Returns all but the first `n` elements of the given list, string, or\\ntransducer/transformer (or object with a `drop` method).\\n\\nDispatches to the `drop` method of the second argument, if present.',\n        resource: 'https://ramdajs.com/docs/#drop'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'remove values from the start based on custom logic',\n    func: [\n      {\n        name: 'dropWhile',\n        notation: '(a -> Boolean) -> [a] -> [a]',\n        description:\n          'Returns a new list excluding the leading elements of a given list which\\nsatisfy the supplied predicate function. It passes each value to the supplied\\npredicate function, skipping elements while the predicate function returns\\n`true`. The predicate function is applied to one argument: *(value)*.\\n\\nDispatches to the `dropWhile` method of the second argument, if present.\\n\\nActs as a transducer if a transformer is given in list position.',\n        resource: 'https://ramdajs.com/docs/#dropWhile'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'remove values from the end',\n    func: [\n      {\n        name: 'dropLast',\n        notation: 'Number -> [a] -> [a]',\n        description:\n          'Returns a list containing all but the last `n` elements of the given `list`.\\n\\nActs as a transducer if a transformer is given in list position.',\n        resource: 'https://ramdajs.com/docs/#dropLast'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'remove values from the end based on custom logic',\n    func: [\n      {\n        name: 'dropLastWhile',\n        notation: '(a -> Boolean) -> [a] -> [a]',\n        description:\n          'Returns a new list excluding all the tailing elements of a given list which\\nsatisfy the supplied predicate function. It passes each value from the right\\nto the supplied predicate function, skipping elements until the predicate\\nfunction returns a `falsy` value. The predicate function is applied to one argument:\\n*(value)*.\\n\\nActs as a transducer if a transformer is given in list position.',\n        resource: 'https://ramdajs.com/docs/#dropLastWhile'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'compute the sum',\n    func: [\n      {\n        name: 'sum',\n        resource: 'https://ramdajs.com/docs/#sum'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'compute the product',\n    func: [\n      {\n        name: 'product',\n        resource: 'https://ramdajs.com/docs/#product'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'compute the average',\n    func: [\n      {\n        name: 'mean',\n        resource: 'https://ramdajs.com/docs/#mean'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'compute the median',\n    func: [\n      {\n        name: 'median',\n        resource: 'https://ramdajs.com/docs/#median'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'compute based on custom logic and only output the final value',\n    func: [\n      {\n        name: 'reduce',\n        notation: '((a, b) -> a) -> a -> [b] -> a',\n        description:\n          \"Returns a single item by iterating through the list, successively calling\\nthe iterator function and passing it an accumulator value and the current\\nvalue from the array, and then passing the result to the next call.\\n\\nThe iterator function receives two values: *(acc, value)*. It may use\\n[`R.reduced`](#reduced) to shortcut the iteration.\\n\\nThe arguments' order of [`reduceRight`](#reduceRight)'s iterator function\\nis *(value, acc)*.\\n\\nNote: `R.reduce` does not skip deleted or unassigned indices (sparse\\narrays), unlike the native `Array.prototype.reduce` method. For more details\\non this behavior, see:\\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\\n\\nDispatches to the `reduce` method of the third argument, if present. When\\ndoing so, it is up to the user to handle the [`R.reduced`](#reduced)\\nshortcuting, as this is not implemented by `reduce`.\",\n        resource: 'https://ramdajs.com/docs/#reduce',\n        example: {\n          code: '',\n          output: ''\n        }\n      },\n      {\n        name: 'reduceRight',\n        notation: '((a, b) -> b) -> b -> [a] -> b',\n        description:\n          \"Returns a single item by iterating through the list, successively calling\\nthe iterator function and passing it an accumulator value and the current\\nvalue from the array, and then passing the result to the next call.\\n\\nSimilar to [`reduce`](#reduce), except moves through the input list from the\\nright to the left.\\n\\nThe iterator function receives two values: *(value, acc)*, while the arguments'\\norder of `reduce`'s iterator function is *(acc, value)*.\\n\\nNote: `R.reduceRight` does not skip deleted or unassigned indices (sparse\\narrays), unlike the native `Array.prototype.reduceRight` method. For more details\\non this behavior, see:\\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\",\n        resource: 'https://ramdajs.com/docs/#reduceRight',\n        example: {\n          code: '',\n          output: ''\n        }\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action:\n      'compute based on custom logic and output the values as they are calculated',\n    func: [\n      {\n        name: 'scan',\n        notation: '((a, b) -> a) -> a -> [b] -> [a]',\n        description:\n          'Scan is similar to [`reduce`](#reduce), but returns a list of successively\\nreduced values from the left',\n        resource: 'https://ramdajs.com/docs/#scan'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'take the first value',\n    func: [\n      {\n        name: 'head',\n        notation: '[a] -> a | Undefined',\n        description:\n          'Returns the first element of the given list or string. In some libraries\\nthis function is named `first`.',\n        resource: 'https://ramdajs.com/docs/#head'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'take the last value',\n    func: [\n      {\n        name: 'last',\n        notation: '[a] -> a | Undefined',\n        description: 'Returns the last element of the given list or string.',\n        resource: 'https://ramdajs.com/docs/#last'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'take a value from a specific index',\n    func: [\n      {\n        name: 'nth',\n        notation: 'Number -> [a] -> a | Undefined',\n        description:\n          'Returns the nth element of the given list or string. If n is negative the\\nelement at index length + n is returned.',\n        resource: 'https://ramdajs.com/docs/#nth'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'take the first occurrence of a value based on custom logic',\n    func: [\n      {\n        name: 'find',\n        notation: '(a -> Boolean) -> [a] -> a | undefined',\n        description:\n          'Returns the first element of the list which matches the predicate, or\\n`undefined` if no element matches.\\n\\nDispatches to the `find` method of the second argument, if present.\\n\\nActs as a transducer if a transformer is given in list position.',\n        resource: 'https://ramdajs.com/docs/#find'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'take the last occurrence of a value based on custom logic',\n    func: [\n      {\n        name: 'findLast',\n        notation: '(a -> Boolean) -> [a] -> a | undefined',\n        description:\n          'Returns the last element of the list which matches the predicate, or\\n`undefined` if no element matches.\\n\\nActs as a transducer if a transformer is given in list position.',\n        resource: 'https://ramdajs.com/docs/#findLast'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'know if a specific value is present',\n    func: [\n      {\n        name: 'contains',\n        resource: 'https://ramdajs.com/docs/#contains'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'know where the first occurrence of a value is',\n    func: [\n      {\n        name: 'indexOf',\n        notation: 'a -> [a] -> Number',\n        description:\n          'Returns the position of the first occurrence of an item in an array, or -1\\nif the item is not included in the array. [`R.equals`](#equals) is used to\\ndetermine equality.',\n        resource: 'https://ramdajs.com/docs/#indexOf'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action:\n      'know where the first occurrence of a value is based on custom logic',\n    func: [\n      {\n        name: 'findIndex',\n        notation: '(a -> Boolean) -> [a] -> Number',\n        description:\n          'Returns the index of the first element of the list which matches the\\npredicate, or `-1` if no element matches.\\n\\nActs as a transducer if a transformer is given in list position.',\n        resource: 'https://ramdajs.com/docs/#findIndex'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'know where the last occurrence of a value is',\n    func: [\n      {\n        name: 'lastIndexOf',\n        notation: 'a -> [a] -> Number',\n        description:\n          'Returns the position of the last occurrence of an item in an array, or -1 if\\nthe item is not included in the array. [`R.equals`](#equals) is used to\\ndetermine equality.',\n        resource: 'https://ramdajs.com/docs/#lastIndexOf'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action:\n      'know where the last occurrence of a value is based on custom logic',\n    func: [\n      {\n        name: 'findLastIndex',\n        notation: '(a -> Boolean) -> [a] -> Number',\n        description:\n          'Returns the index of the last element of the list which matches the\\npredicate, or `-1` if no element matches.\\n\\nActs as a transducer if a transformer is given in list position.',\n        resource: 'https://ramdajs.com/docs/#findLastIndex'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'know if a condition is satisfied by all of the values',\n    func: [\n      {\n        name: 'all',\n        notation: '(a -> Boolean) -> [a] -> Boolean',\n        description:\n          \"Returns `true` if all elements of the list match the predicate, `false` if\\nthere are any that don't.\\n\\nDispatches to the `all` method of the second argument, if present.\\n\\nActs as a transducer if a transformer is given in list position.\",\n        resource: 'https://ramdajs.com/docs/#all'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'know if a condition is satisfied by any of the values',\n    func: [\n      {\n        name: 'any',\n        notation: '(a -> Boolean) -> [a] -> Boolean',\n        description:\n          'Returns `true` if at least one of the elements of the list match the predicate,\\n`false` otherwise.\\n\\nDispatches to the `any` method of the second argument, if present.\\n\\nActs as a transducer if a transformer is given in list position.',\n        resource: 'https://ramdajs.com/docs/#any'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'know if a condition is satisfied by none of the values',\n    func: [\n      {\n        name: 'none',\n        notation: '(a -> Boolean) -> [a] -> Boolean',\n        description:\n          'Returns `true` if no elements of the list match the predicate, `false`\\notherwise.\\n\\nDispatches to the `all` method of the second argument, if present.\\n\\nActs as a transducer if a transformer is given in list position.',\n        resource: 'https://ramdajs.com/docs/#none'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'replace a value at a specific index',\n    func: [\n      {\n        name: 'update',\n        notation: 'Number -> a -> [a] -> [a]',\n        description:\n          'Returns a new copy of the array with the element at the provided index\\nreplaced with the given value.',\n        resource: 'https://ramdajs.com/docs/#update'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'replace a value at a specific index based on custom logic',\n    func: [\n      {\n        name: 'adjust',\n        notation: 'Number -> (a -> a) -> [a] -> [a]',\n        description:\n          'Applies a function to the value at the given index of an array, returning a\\nnew copy of the array with the element at the given index replaced with the\\nresult of the function application.',\n        resource: 'https://ramdajs.com/docs/#adjust'\n      },\n      {\n        name: 'lensPath',\n        resource: 'https://ramdajs.com/docs/#lensPath'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'add a value at the start',\n    func: [\n      {\n        name: 'prepend',\n        notation: 'a -> [a] -> [a]',\n        description:\n          'Returns a new list with the given element at the front, followed by the\\ncontents of the list.',\n        resource: 'https://ramdajs.com/docs/#prepend'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'add a value at the end',\n    func: [\n      {\n        name: 'append',\n        notation: 'a -> [a] -> [a]',\n        description:\n          'Returns a new list containing the contents of the given list, followed by\\nthe given element.',\n        resource: 'https://ramdajs.com/docs/#append'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'add a value at a specific index',\n    func: [\n      {\n        name: 'insert',\n        notation: 'Number -> a -> [a] -> [a]',\n        description:\n          'Inserts the supplied element into the list, at the specified `index`. _Note that\\nthis is not destructive_: it returns a copy of the list with the changes.\\n<small>No lists have been harmed in the application of this function.</small>',\n        resource: 'https://ramdajs.com/docs/#insert'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'add multiple values at a specific index',\n    func: [\n      {\n        name: 'insertAll',\n        notation: 'Number -> [a] -> [a] -> [a]',\n        description:\n          'Inserts the sub-list into the list, at the specified `index`. _Note that this is not\\ndestructive_: it returns a copy of the list with the changes.\\n<small>No lists have been harmed in the application of this function.</small>',\n        resource: 'https://ramdajs.com/docs/#insertAll'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'group values based on custom logic',\n    func: [\n      {\n        name: 'groupBy',\n        notation: '(a -> String) -> [a] -> {String: [a]}',\n        description:\n          'Splits a list into sub-lists stored in an object, based on the result of\\ncalling a String-returning function on each element, and grouping the\\nresults according to values returned.\\n\\nDispatches to the `groupBy` method of the second argument, if present.\\n\\nActs as a transducer if a transformer is given in list position.',\n        resource: 'https://ramdajs.com/docs/#groupBy'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'know how many values it contains',\n    func: [\n      {\n        name: 'length',\n        notation: '[a] -> Number',\n        description:\n          'Returns the number of elements in the array by returning `list.length`.',\n        resource: 'https://ramdajs.com/docs/#length'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'get a specific range of integer values',\n    func: [\n      {\n        name: 'range',\n        notation: 'Number -> Number -> [Number]',\n        description:\n          'Returns a list of numbers from `from` (inclusive) to `to` (exclusive).',\n        resource: 'https://ramdajs.com/docs/#range'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'split at a specific index',\n    func: [\n      {\n        name: 'splitAt',\n        notation: 'Number -> [a] -> [[a], [a]]',\n        description: 'Splits a given list or string at a given index.',\n        resource: 'https://ramdajs.com/docs/#splitAt'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'split based on custom logic',\n    func: [\n      {\n        name: 'splitWhen',\n        notation: '(a -> Boolean) -> [a] -> [[a], [a]]',\n        description:\n          'Takes a list and a predicate and returns a pair of lists with the following properties:\\n\\n - the result of concatenating the two output lists is equivalent to the input list;\\n - none of the elements of the first output list satisfies the predicate; and\\n - if the second output list is non-empty, its first element satisfies the predicate.',\n        resource: 'https://ramdajs.com/docs/#splitWhen'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'split into chunks of a specific length',\n    func: [\n      {\n        name: 'splitEvery',\n        notation: 'Number -> [a] -> [[a]]',\n        description: 'Splits a collection into slices of the specified length.',\n        resource: 'https://ramdajs.com/docs/#splitEvery'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'reverse',\n    func: [\n      {\n        name: 'reverse',\n        notation: '[a] -> [a]',\n        description:\n          'Returns a new list or string with the elements or characters in reverse\\norder.',\n        resource: 'https://ramdajs.com/docs/#reverse'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'sort',\n    func: [\n      {\n        name: 'sort',\n        notation: '((a, a) -> Number) -> [a] -> [a]',\n        description:\n          \"Returns a copy of the list, sorted according to the comparator function,\\nwhich should accept two values at a time and return a negative number if the\\nfirst value is smaller, a positive number if it's larger, and zero if they\\nare equal. Please note that this is a **copy** of the list. It does not\\nmodify the original.\",\n        resource: 'https://ramdajs.com/docs/#sort'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'sort based on custom logic',\n    func: [\n      {\n        name: 'sortBy',\n        resource: 'https://ramdajs.com/docs/#sortBy'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'concatenate two lists',\n    func: [\n      {\n        name: 'concat',\n        notation: '[a] -> [a] -> [a]',\n        description:\n          'Returns the result of concatenating the given lists or strings.\\n\\nNote: `R.concat` expects both arguments to be of the same type,\\nunlike the native `Array.prototype.concat` method. It will throw\\nan error if you `concat` an Array with a non-Array value.\\n\\nDispatches to the `concat` method of the first argument, if present.\\nCan also concatenate two members of a [fantasy-land\\ncompatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).',\n        resource: 'https://ramdajs.com/docs/#concat'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'find the common values in two lists',\n    func: [\n      {\n        name: 'intersection',\n        resource: 'https://ramdajs.com/docs/#intersection'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'find the common values in two lists based on custom logic',\n    func: [\n      {\n        name: 'intersectionWith',\n        resource: 'https://ramdajs.com/docs/#intersectionWith'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'find the distinct values compared to another list',\n    func: [\n      {\n        name: 'difference',\n        resource: 'https://ramdajs.com/docs/#difference'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action:\n      'find the distinct values compared to another list based on custom logic',\n    func: [\n      {\n        name: 'differenceWith',\n        resource: 'https://ramdajs.com/docs/#differenceWith'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'combine two lists into a list of unique values',\n    func: [\n      {\n        name: 'union',\n        resource: 'https://ramdajs.com/docs/#union'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action:\n      'combine two lists into a list of unique values based on custom logic',\n    func: [\n      {\n        name: 'unionWith',\n        resource: 'https://ramdajs.com/docs/#unionWith'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'combine two lists into a list of pairs',\n    func: [\n      {\n        name: 'zip',\n        notation: '[a] -> [b] -> [[a,b]]',\n        description:\n          'Creates a new list out of the two supplied by pairing up equally-positioned\\nitems from both lists. The returned list is truncated to the length of the\\nshorter of the two input lists.\\nNote: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.',\n        resource: 'https://ramdajs.com/docs/#zip'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'combine two lists into a list of pairs based on custom logic',\n    func: [\n      {\n        name: 'zipWith',\n        notation: '((a, b) -> c) -> [a] -> [b] -> [c]',\n        description:\n          'Creates a new list out of the two supplied by applying the function to each\\nequally-positioned pair in the lists. The returned list is truncated to the\\nlength of the shorter of the two input lists.',\n        resource: 'https://ramdajs.com/docs/#zipWith'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action: 'convert list of objects into one object',\n    func: [\n      {\n        name: 'indexBy',\n        notation: '(a -> String) -> [{k: v}] -> {k: {k: v}}',\n        description:\n          'Given a function that generates a key, turns a list of objects into an\\nobject indexing the objects by the given key. Note that if multiple\\nobjects generate the same value for the indexing key only the last value\\nwill be included in the generated object.\\n\\nActs as a transducer if a transformer is given in list position.',\n        resource: 'https://ramdajs.com/docs/#indexBy'\n      }\n    ]\n  },\n  {\n    type: 'list',\n    action:\n      'split a list into two sub lists based on a single predicate function',\n    func: [\n      {\n        name: 'partition',\n        notation: 'Filterable f => (a -> Boolean) -> f a -> [f a, f a]',\n        description:\n          'Takes a predicate and a list or other `Filterable` object and returns the\\npair of filterable objects of the same type of elements which do and do not\\nsatisfy, the predicate, respectively. Filterable objects include plain objects or any object\\nthat has a filter method such as `Array`.',\n        resource: 'https://ramdajs.com/docs/#partition'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'change every value',\n    func: [\n      {\n        name: 'map',\n        resouce: 'https://ramdajs.com/docs/#map'\n      },\n      {\n        name: 'mapObjIndexed',\n        resouce: '#mapObjIndexed',\n        description:\n          'An Object-specific version of [`map`](#map). The function is applied to three\\narguments: *(value, key, obj)*. If only the value is significant, use\\n[`map`](#map) instead.',\n        notation: '((*, String, Object) -> *) -> Object -> Object'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: \"select a specific key's value\",\n    func: [\n      {\n        name: 'prop',\n        resouce: 'https://ramdajs.com/docs/#prop',\n        description:\n          'Returns a function that when supplied an object returns the indicated\\nproperty of that object, if it exists.',\n        notation: 's -> {s: a} -> a | Undefined'\n      },\n      {\n        name: 'path',\n        resouce: 'https://ramdajs.com/docs/#path',\n        description: 'Retrieve the value at a given path.',\n        notation: '[Idx] -> {a} -> a | Undefined'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action:\n      \"select a specific key's value or return a default if it is not found\",\n    func: [\n      {\n        name: 'propOr',\n        resouce: '',\n        description:\n          'If the given, non-null object has an own property with the specified name,\\nreturns the value of that property. Otherwise returns the provided default\\nvalue.',\n        notation: 'a -> String -> Object -> a'\n      },\n      {\n        name: 'pathOr',\n        resouce: '',\n        description:\n          'If the given, non-null object has a value at the given path, returns the\\nvalue at that path. Otherwise returns the provided default value.',\n        notation: 'a -> [Idx] -> {a} -> a'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: \"select specific keys' values\",\n    func: [\n      {\n        name: 'props',\n        resouce: '',\n        description:\n          'Acts as multiple `prop`: array of keys in, array of values out. Preserves\\norder.',\n        notation: '[k] -> {k: v} -> [v]'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'select specific keys',\n    func: [\n      {\n        name: 'pick',\n        resouce: '',\n        description:\n          'Returns a partial copy of an object containing only the keys specified. If\\nthe key does not exist, the property is ignored.',\n        notation: '[k] -> {k: v} -> {k: v}'\n      },\n      {\n        name: 'pickAll',\n        resouce: '',\n        description:\n          \"Similar to `pick` except that this one includes a `key: undefined` pair for\\nproperties that don't exist.\",\n        notation: '[k] -> {k: v} -> {k: v}'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'select keys based on custom logic',\n    func: [\n      {\n        name: 'filter',\n        resouce: ''\n      },\n      {\n        name: 'pickBy',\n        resouce: '',\n        description:\n          'Returns a partial copy of an object containing only the keys that satisfy\\nthe supplied predicate.',\n        notation: '((v, k) -> Boolean) -> {k: v} -> {k: v}'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'remove a specific key',\n    func: [\n      {\n        name: 'dissoc',\n        resouce: '',\n        description:\n          'Returns a new object that does not contain a `prop` property.',\n        notation: 'String -> {k: v} -> {k: v}'\n      },\n      {\n        name: 'dissocPath',\n        resouce: '',\n        description:\n          'Makes a shallow clone of an object, omitting the property at the given path.\\nNote that this copies and flattens prototype properties onto the new object\\nas well. All non-primitive properties are copied by reference.',\n        notation: '[Idx] -> {k: v} -> {k: v}'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'remove specific keys',\n    func: [\n      {\n        name: 'omit',\n        resouce: '',\n        description:\n          'Returns a partial copy of an object omitting the keys specified.',\n        notation: '[String] -> {String: *} -> {String: *}'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'remove specific keys based on custom logic',\n    func: [\n      {\n        name: 'reject',\n        resouce: ''\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'add a specific key and value',\n    func: [\n      {\n        name: 'assoc',\n        resouce: '',\n        description:\n          'Makes a shallow clone of an object, setting or overriding the specified\\nproperty with the given value. Note that this copies and flattens prototype\\nproperties onto the new object as well. All non-primitive properties are\\ncopied by reference.',\n        notation: 'String -> a -> {k: v} -> {k: v}'\n      },\n      {\n        name: 'assocPath',\n        resouce: '',\n        description:\n          'Makes a shallow clone of an object, setting or overriding the nodes required\\nto create the given path, and placing the specific value at the tail end of\\nthat path. Note that this copies and flattens prototype properties onto the\\nnew object as well. All non-primitive properties are copied by reference.',\n        notation: '[Idx] -> a -> {a} -> {a}'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'replace a specific value based on custom logic',\n    func: [\n      {\n        name: 'lens',\n        resouce: '',\n        description:\n          'Returns a lens for the given getter and setter functions. The getter \"gets\"\\nthe value of the focus; the setter \"sets\" the value of the focus. The setter\\nshould not mutate the data structure.',\n        notation: '(s -> a) -> ((a, s) -> s) -> Lens s a'\n      },\n      {\n        name: 'lensProp',\n        resouce: '',\n        description: 'Returns a lens whose focus is the specified property.',\n        notation: 'String -> Lens s a'\n      },\n      {\n        name: 'lensPath',\n        resouce: '',\n        description: 'Returns a lens whose focus is the specified path.',\n        notation: '[Idx] -> Lens s a'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'replace specific values based on custom logic',\n    func: [\n      {\n        name: 'evolve',\n        resouce: '',\n        description:\n          'Creates a new object by recursively evolving a shallow copy of `object`,\\naccording to the `transformation` functions. All non-primitive properties\\nare copied by reference.\\n\\nA `transformation` function will not be invoked if its corresponding key\\ndoes not exist in the evolved object.',\n        notation: '{k: (v -> v)} -> {k: v} -> {k: v}'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'know if a specific key is present',\n    func: [\n      {\n        name: 'has',\n        resouce: '',\n        description:\n          'Returns whether or not an object has an own property with the specified name',\n        notation: 's -> {s: x} -> Boolean'\n      },\n      {\n        name: 'hasIn',\n        resouce: '',\n        description:\n          'Returns whether or not an object or its prototype chain has a property with\\nthe specified name',\n        notation: 's -> {s: x} -> Boolean'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'know if a specific key has a specific value',\n    func: [\n      {\n        name: 'propEq',\n        resouce: ''\n      },\n      {\n        name: 'pathEq',\n        resouce: ''\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: \"know if a specific key's value satisfies a custom predicate\",\n    func: [\n      {\n        name: 'propSatisfies',\n        resouce: ''\n      },\n      {\n        name: 'pathSatisfies',\n        resouce: ''\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'know if specific keys have specific values',\n    func: [\n      {\n        name: 'whereEq',\n        resouce: '',\n        description:\n          \"Takes a spec object and a test object; returns true if the test satisfies\\nthe spec, false otherwise. An object satisfies the spec if, for each of the\\nspec's own properties, accessing that property of the object gives the same\\nvalue (in [`R.equals`](#equals) terms) as accessing that property of the\\nspec.\\n\\n`whereEq` is a specialization of [`where`](#where).\",\n        notation: '{String: *} -> {String: *} -> Boolean'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: \"know if specific keys' values satisfy custom predicates\",\n    func: [\n      {\n        name: 'where',\n        resouce: '',\n        description:\n          \"Takes a spec object and a test object; returns true if the test satisfies\\nthe spec. Each of the spec's own properties must be a predicate function.\\nEach predicate is applied to the value of the corresponding property of the\\ntest object. `where` returns true if all the predicates return true, false\\notherwise.\\n\\n`where` is well suited to declaratively expressing constraints for other\\nfunctions such as [`filter`](#filter) and [`find`](#find).\",\n        notation: '{String: (* -> Boolean)} -> {String: *} -> Boolean'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'list all the keys',\n    func: [\n      {\n        name: 'keys',\n        resouce: '',\n        description:\n          'Returns a list containing the names of all the enumerable own properties of\\nthe supplied object.\\nNote that the order of the output array is not guaranteed to be consistent\\nacross different JS platforms.',\n        notation: '{k: v} -> [k]'\n      },\n      {\n        name: 'keysIn',\n        resouce: '',\n        description:\n          'Returns a list containing the names of all the properties of the supplied\\nobject, including prototype properties.\\nNote that the order of the output array is not guaranteed to be consistent\\nacross different JS platforms.',\n        notation: '{k: v} -> [k]'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'list all the values',\n    func: [\n      {\n        name: 'values',\n        resouce: '',\n        description:\n          'Returns a list of all the enumerable own properties of the supplied object.\\nNote that the order of the output array is not guaranteed across different\\nJS platforms.',\n        notation: '{k: v} -> [v]'\n      },\n      {\n        name: 'valuesIn',\n        resouce: '',\n        description:\n          'Returns a list of all the properties, including prototype properties, of the\\nsupplied object.\\nNote that the order of the output array is not guaranteed to be consistent\\nacross different JS platforms.',\n        notation: '{k: v} -> [v]'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'convert to a list of pairs',\n    func: [\n      {\n        name: 'toPairs',\n        resouce: '',\n        description:\n          \"Converts an object into an array of key, value arrays. Only the object's\\nown properties are used.\\nNote that the order of the output array is not guaranteed to be consistent\\nacross different JS platforms.\",\n        notation: '{String: *} -> [[String,*]]'\n      },\n      {\n        name: 'toPairsIn',\n        resouce: '',\n        description:\n          \"Converts an object into an array of key, value arrays. The object's own\\nproperties and prototype properties are used. Note that the order of the\\noutput array is not guaranteed to be consistent across different JS\\nplatforms.\",\n        notation: '{String: *} -> [[String,*]]'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'know if two objects share the same key and value',\n    func: [\n      {\n        name: 'eqProps',\n        resouce: '',\n        description:\n          'Reports whether two objects have the same value, in [`R.equals`](#equals)\\nterms, for the specified property. Useful as a curried predicate.',\n        notation: 'k -> {k: v} -> {k: v} -> Boolean'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'create an object with a single key and value',\n    func: [\n      {\n        name: 'objOf',\n        resouce: '',\n        description: 'Creates an object containing a single key:value pair.',\n        notation: 'String -> a -> {String:a}'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'create an object with multiple keys and values',\n    func: [\n      {\n        name: 'zipObj',\n        resouce: ''\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'clone an object',\n    func: [\n      {\n        name: 'clone',\n        resouce: '',\n        description:\n          'Creates a deep copy of the value which may contain (nested) `Array`s and\\n`Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are\\nassigned by reference rather than copied\\n\\nDispatches to a `clone` method if present.',\n        notation: '{*} -> {*}'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'merge two objects into one object',\n    func: [\n      {\n        name: 'merge',\n        resouce: '',\n        description:\n          'Create a new object with the own properties of the first object merged with\\nthe own properties of the second object. If a key exists in both objects,\\nthe value from the second object will be used.',\n        notation: '{k: v} -> {k: v} -> {k: v}'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action:\n      'merge two objects into one object based on custom duplicate key logic',\n    func: [\n      {\n        name: 'mergeWith',\n        resouce: '',\n        description:\n          'Creates a new object with the own properties of the two provided objects. If\\na key exists in both objects, the provided function is applied to the values\\nassociated with the key in each object, with the result being used as the\\nvalue associated with the key in the returned object.',\n        notation: '((a, a) -> a) -> {a} -> {a} -> {a}'\n      }\n    ]\n  },\n  {\n    type: 'object',\n    action: 'merge more than two objects into one object',\n    func: [\n      {\n        name: 'mergeAll',\n        resouce: ''\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'combine functions',\n    func: [\n      {\n        name: 'pipe',\n        notation:\n          '(((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)',\n        description:\n          'Performs left-to-right function composition. The leftmost function may have\\nany arity; the remaining functions must be unary.\\n\\nIn some libraries this function is named `sequence`.\\n\\n**Note:** The result of pipe is not automatically curried.',\n        resource: 'https://ramdajs.com/docs/#pipe'\n      },\n      {\n        name: 'compose',\n        notation:\n          '((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)',\n        description:\n          'Performs right-to-left function composition. The rightmost function may have\\nany arity; the remaining functions must be unary.\\n\\n**Note:** The result of compose is not automatically curried.',\n        resource: 'https://ramdajs.com/docs/#compose'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'combine promise returning functions',\n    func: [\n      {\n        name: 'pipeP',\n        notation:\n          '((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)',\n        description:\n          'Performs left-to-right composition of one or more Promise-returning\\nfunctions. The leftmost function may have any arity; the remaining functions\\nmust be unary.',\n        resource: 'https://ramdajs.com/docs/#pipeP'\n      },\n      {\n        name: 'composeP',\n        notation:\n          '((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)',\n        description:\n          'Performs right-to-left composition of one or more Promise-returning\\nfunctions. The rightmost function may have any arity; the remaining\\nfunctions must be unary.',\n        resource: 'https://ramdajs.com/docs/#composeP'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'curry a function',\n    func: [\n      {\n        name: 'curry',\n        notation: '(* -> a) -> (* -> a)',\n        description:\n          'Returns a curried equivalent of the provided function. The curried function\\nhas two unusual capabilities. First, its arguments needn\\'t be provided one\\nat a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\\nfollowing are equivalent:\\n\\n  - `g(1)(2)(3)`\\n  - `g(1)(2, 3)`\\n  - `g(1, 2)(3)`\\n  - `g(1, 2, 3)`\\n\\nSecondly, the special placeholder value [`R.__`](#__) may be used to specify\\n\"gaps\", allowing partial application of any combination of arguments,\\nregardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\\nthe following are equivalent:\\n\\n  - `g(1, 2, 3)`\\n  - `g(_, 2, 3)(1)`\\n  - `g(_, _, 3)(1)(2)`\\n  - `g(_, _, 3)(1, 2)`\\n  - `g(_, 2)(1)(3)`\\n  - `g(_, 2)(1, 3)`\\n  - `g(_, 2)(_, 3)(1)`',\n        resource: 'https://ramdajs.com/docs/#curry'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'partially apply a function',\n    func: [\n      {\n        name: 'partialRight',\n        notation:\n          '((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)',\n        description:\n          'Takes a function `f` and a list of arguments, and returns a function `g`.\\nWhen applied, `g` returns the result of applying `f` to the arguments\\nprovided to `g` followed by the arguments provided initially.',\n        resource: 'https://ramdajs.com/docs/#partialRight'\n      },\n      {\n        name: 'partial',\n        notation:\n          '((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)',\n        description:\n          'Takes a function `f` and a list of arguments, and returns a function `g`.\\nWhen applied, `g` returns the result of applying `f` to the arguments\\nprovided initially followed by the arguments provided to `g`.',\n        resource: 'https://ramdajs.com/docs/#partial'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'uncurry a function',\n    func: [\n      {\n        name: 'uncurry',\n        resource: 'https://ramdajs.com/docs/#uncurry'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'swap the argument order',\n    func: [\n      {\n        name: 'flip',\n        notation: '((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)',\n        description:\n          \"Returns a new function much like the supplied one, except that the first two\\narguments' order is reversed.\",\n        resource: 'https://ramdajs.com/docs/#flip'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'apply a list of arguments',\n    func: [\n      {\n        name: 'apply',\n        notation: '(*... -> a) -> [*] -> a',\n        description:\n          'Applies function `fn` to the argument list `args`. This is useful for\\ncreating a fixed-arity function from a variadic function. `fn` should be a\\nbound function if context is significant.',\n        resource: 'https://ramdajs.com/docs/#apply'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action:\n      'apply multiple functions to a single value and merge the results somehow',\n    func: [\n      {\n        name: 'converge',\n        notation:\n          '((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)',\n        description:\n          'Accepts a converging function and a list of branching functions and returns\\na new function. The arity of the new function is the same as the arity of\\nthe longest branching function. When invoked, this new function is applied\\nto some arguments, and each branching function is applied to those same\\narguments. The results of each branching function are passed as arguments\\nto the converging function to produce the return value.',\n        resource: 'https://ramdajs.com/docs/#converge'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: \"transform a function's arguments\",\n    func: [\n      {\n        name: 'useWith',\n        notation:\n          '((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)',\n        description:\n          \"Accepts a function `fn` and a list of transformer functions and returns a\\nnew curried function. When the new function is invoked, it calls the\\nfunction `fn` with parameters consisting of the result of calling each\\nsupplied handler on successive arguments to the new function.\\n\\nIf more arguments are passed to the returned function than transformer\\nfunctions, those arguments are passed directly to `fn` as additional\\nparameters. If you expect additional arguments that don't need to be\\ntransformed, although you can ignore them, it's best to pass an identity\\nfunction so that the new function reports the correct arity.\",\n        resource: 'https://ramdajs.com/docs/#useWith'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action:\n      'apply a list of functions to each argument and collect the results',\n    func: [\n      {\n        name: 'juxt',\n        notation: '[(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])',\n        description: 'juxt applies a list of functions to a list of values.',\n        resource: 'https://ramdajs.com/docs/#juxt'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'create a variadic function from one that takes an array',\n    func: [\n      {\n        name: 'unapply',\n        notation: '([*...] -> a) -> (*... -> a)',\n        description:\n          'Takes a function `fn`, which takes a single array argument, and returns a\\nfunction which:\\n\\n  - takes any number of positional arguments;\\n  - passes these arguments to `fn` as an array; and\\n  - returns the result.\\n\\nIn other words, `R.unapply` derives a variadic function from a function which\\ntakes an array. `R.unapply` is the inverse of [`R.apply`](#apply).',\n        resource: 'https://ramdajs.com/docs/#unapply'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'restrict the number of accepted arguments to 1',\n    func: [\n      {\n        name: 'unary',\n        notation: '(* -> b) -> (a -> b)',\n        description:\n          'Wraps a function of any arity (including nullary) in a function that accepts\\nexactly 1 parameter. Any extraneous parameters will not be passed to the\\nsupplied function.',\n        resource: 'https://ramdajs.com/docs/#unary'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'restrict the number of accepted arguments to 2',\n    func: [\n      {\n        name: 'binary',\n        notation: '(* -> c) -> (a, b -> c)',\n        description:\n          'Wraps a function of any arity (including nullary) in a function that accepts\\nexactly 2 parameters. Any extraneous parameters will not be passed to the\\nsupplied function.',\n        resource: 'https://ramdajs.com/docs/#binary'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'restrict the number of accepted arguments to specific number',\n    func: [\n      {\n        name: 'nAry',\n        notation: 'Number -> (* -> a) -> (* -> a)',\n        description:\n          'Wraps a function of any arity (including nullary) in a function that accepts\\nexactly `n` parameters. Any extraneous parameters will not be passed to the\\nsupplied function.',\n        resource: 'https://ramdajs.com/docs/#nAry'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'return the supplied argument unchanged',\n    func: [\n      {\n        name: 'identity',\n        notation: 'a -> a',\n        description:\n          'A function that does nothing but return the parameter supplied to it. Good\\nas a default or placeholder function.',\n        resource: 'https://ramdajs.com/docs/#identity'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'turn a method into a function',\n    func: [\n      {\n        name: 'invoker',\n        notation: 'Number -> String -> (a -> b -> ... -> n -> Object -> *)',\n        description:\n          'Turns a named method with a specified arity into a function that can be\\ncalled directly supplied with arguments and a target object.\\n\\nThe returned function is curried and accepts `arity + 1` parameters where\\nthe final parameter is the target object.',\n        resource: 'https://ramdajs.com/docs/#invoker'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'invoke a function only once',\n    func: [\n      {\n        name: 'once',\n        notation: '(a... -> b) -> (a... -> b)',\n        description:\n          'Accepts a function `fn` and returns a function that guards invocation of\\n`fn` such that `fn` can only ever be called once, no matter how many times\\nthe returned function is invoked. The first value calculated is returned in\\nsubsequent invocations.',\n        resource: 'https://ramdajs.com/docs/#once'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'inspect values without affecting them',\n    func: [\n      {\n        name: 'tap',\n        notation: '(a -> *) -> a -> a',\n        description:\n          'Runs the given function with the supplied object, then returns the object.\\n\\nActs as a transducer if a transformer is given as second parameter.',\n        resource: 'https://ramdajs.com/docs/#tap'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'bind to a specific context',\n    func: [\n      {\n        name: 'bind',\n        notation: '(* -> *) -> {*} -> (* -> *)',\n        description:\n          'Creates a function that is bound to a context.\\nNote: `R.bind` does not provide the additional argument-binding capabilities of\\n[Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).',\n        resource: 'https://ramdajs.com/docs/#bind'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'lift a function',\n    func: [\n      {\n        name: 'liftN',\n        notation: 'Number -> (*... -> *) -> ([*]... -> [*])',\n        description:\n          '\"lifts\" a function to be the specified arity, so that it may \"map over\" that\\nmany lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).',\n        resource: 'https://ramdajs.com/docs/#liftN'\n      },\n      {\n        name: 'lift',\n        notation: '(*... -> *) -> ([*]... -> [*])',\n        description:\n          '\"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\\nobject that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).',\n        resource: 'https://ramdajs.com/docs/#lift'\n      }\n    ]\n  },\n  {\n    type: 'function',\n    action: 'memoize',\n    func: [\n      {\n        name: 'memoize',\n        resource: 'https://ramdajs.com/docs/#memoize'\n      }\n    ]\n  },\n  {\n    type: 'logic',\n    action: 'apply a function based on conditional logic',\n    func: [\n      {\n        name: 'ifElse',\n        notation:\n          '(*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)',\n        description:\n          'Creates a function that will process either the `onTrue` or the `onFalse`\\nfunction depending upon the result of the `condition` predicate.',\n        resource: 'https://ramdajs.com/docs/#ifElse'\n      },\n      {\n        name: 'cond',\n        notation: '[[(*... -> Boolean),(*... -> *)]] -> (*... -> *)',\n        description:\n          'Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\\n`R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\\nto `fn` are applied to each of the predicates in turn until one returns a\\n\"truthy\" value, at which point `fn` returns the result of applying its\\narguments to the corresponding transformer. If none of the predicates\\nmatches, `fn` returns undefined.',\n        resource: 'https://ramdajs.com/docs/#cond'\n      },\n      {\n        name: 'unless',\n        notation: '(a -> Boolean) -> (a -> a) -> a -> a',\n        description:\n          'Tests the final argument by passing it to the given predicate function. If\\nthe predicate is not satisfied, the function will return the result of\\ncalling the `whenFalseFn` function with the same argument. If the predicate\\nis satisfied, the argument is returned as is.',\n        resource: 'https://ramdajs.com/docs/#unless'\n      },\n      {\n        name: 'when',\n        notation: '(a -> Boolean) -> (a -> a) -> a -> a',\n        description:\n          'Tests the final argument by passing it to the given predicate function. If\\nthe predicate is satisfied, the function will return the result of calling\\nthe `whenTrueFn` function with the same argument. If the predicate is not\\nsatisfied, the argument is returned as is.',\n        resource: 'https://ramdajs.com/docs/#when'\n      }\n    ]\n  },\n  {\n    type: 'logic',\n    action: 'negate a value',\n    func: [\n      {\n        name: 'not',\n        notation: '* -> Boolean',\n        description:\n          'A function that returns the `!` of its argument. It will return `true` when\\npassed false-y value, and `false` when passed a truth-y one.',\n        resource: 'https://ramdajs.com/docs/#not'\n      }\n    ]\n  },\n  {\n    type: 'logic',\n    action: 'know if either of two values are truthy',\n    func: [\n      {\n        name: 'or',\n        notation: 'a -> b -> a | b',\n        description:\n          'Returns `true` if one or both of its arguments are `true`. Returns `false`\\nif both arguments are `false`.',\n        resource: 'https://ramdajs.com/docs/#or'\n      }\n    ]\n  },\n  {\n    type: 'logic',\n    action: 'know if two values are truthy',\n    func: [\n      {\n        name: 'and',\n        notation: 'a -> b -> a | b',\n        description:\n          'Returns `true` if both arguments are `true`; `false` otherwise.',\n        resource: 'https://ramdajs.com/docs/#and'\n      }\n    ]\n  },\n  {\n    type: 'logic',\n    action: 'invert a predicate function',\n    func: [\n      {\n        name: 'complement',\n        notation: '(*... -> *) -> (*... -> Boolean)',\n        description:\n          'Takes a function `f` and returns a function `g` such that if called with the same arguments\\nwhen `f` returns a \"truthy\" value, `g` returns `false` and when `f` returns a \"falsy\" value `g` returns `true`.\\n\\n`R.complement` may be applied to any functor',\n        resource: 'https://ramdajs.com/docs/#complement'\n      }\n    ]\n  },\n  {\n    type: 'logic',\n    action: 'know if a value satisfies at least one of two predicates',\n    func: [\n      {\n        name: 'either',\n        notation: '(*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)',\n        description:\n          'A function wrapping calls to the two functions in an `||` operation,\\nreturning the result of the first function if it is truth-y and the result\\nof the second function otherwise. Note that this is short-circuited,\\nmeaning that the second function will not be invoked if the first returns a\\ntruth-y value.\\n\\nIn addition to functions, `R.either` also accepts any fantasy-land compatible\\napplicative functor.',\n        resource: 'https://ramdajs.com/docs/#either'\n      }\n    ]\n  },\n  {\n    type: 'logic',\n    action: 'know if a value satisfies two predicates',\n    func: [\n      {\n        name: 'both',\n        notation: '(*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)',\n        description:\n          'A function which calls the two provided functions and returns the `&&`\\nof the results.\\nIt returns the result of the first function if it is false-y and the result\\nof the second function otherwise. Note that this is short-circuited,\\nmeaning that the second function will not be invoked if the first returns a\\nfalse-y value.\\n\\nIn addition to functions, `R.both` also accepts any fantasy-land compatible\\napplicative functor.',\n        resource: 'https://ramdajs.com/docs/#both'\n      }\n    ]\n  },\n  {\n    type: 'logic',\n    action: 'know if a value satisfies at least one of a list of predicates',\n    func: [\n      {\n        name: 'anyPass',\n        notation: '[(*... -> Boolean)] -> (*... -> Boolean)',\n        description:\n          'Takes a list of predicates and returns a predicate that returns true for a\\ngiven list of arguments if at least one of the provided predicates is\\nsatisfied by those arguments.\\n\\nThe function returned is a curried function whose arity matches that of the\\nhighest-arity predicate.',\n        resource: 'https://ramdajs.com/docs/#anyPass'\n      }\n    ]\n  },\n  {\n    type: 'logic',\n    action: 'know if a value satisfies at every one of a list of predicates',\n    func: [\n      {\n        name: 'allPass',\n        notation: '[(*... -> Boolean)] -> (*... -> Boolean)',\n        description:\n          'Takes a list of predicates and returns a predicate that returns true for a\\ngiven list of arguments if every one of the provided predicates is satisfied\\nby those arguments.\\n\\nThe function returned is a curried function whose arity matches that of the\\nhighest-arity predicate.',\n        resource: 'https://ramdajs.com/docs/#allPass'\n      }\n    ]\n  },\n  {\n    type: 'logic',\n    action: 'produce an empty value',\n    func: [\n      {\n        name: 'empty',\n        resource: 'https://ramdajs.com/docs/#empty'\n      }\n    ]\n  },\n  {\n    type: 'logic',\n    action: 'know if a value is empty',\n    func: [\n      {\n        name: 'isEmpty',\n        notation: 'a -> Boolean',\n        description:\n          \"Returns `true` if the given value is its type's empty value; `false`\\notherwise.\",\n        resource: 'https://ramdajs.com/docs/#isEmpty'\n      }\n    ]\n  },\n  {\n    type: 'relation',\n    action: 'compare for value equality',\n    func: [\n      {\n        name: 'equals',\n        notation: 'a -> b -> Boolean',\n        description:\n          'Returns `true` if its arguments are equivalent, `false` otherwise. Handles\\ncyclical data structures.\\n\\nDispatches symmetrically to the `equals` methods of both arguments, if\\npresent.',\n        resource: 'https://ramdajs.com/docs/#equals'\n      }\n    ]\n  },\n  {\n    type: 'relation',\n    action: 'compare for reference equality',\n    func: [\n      {\n        name: 'identical',\n        notation: 'a -> a -> Boolean',\n        description:\n          'Returns true if its arguments are identical, false otherwise. Values are\\nidentical if they reference the same memory. `NaN` is identical to `NaN`;\\n`0` and `-0` are not identical.\\n\\nNote this is merely a curried version of ES6 `Object.is`.',\n        resource: 'https://ramdajs.com/docs/#identical'\n      }\n    ]\n  },\n  {\n    type: 'relation',\n    action: 'know if a value is less than another',\n    func: [\n      {\n        name: 'lt',\n        notation: 'Ord a => a -> a -> Boolean',\n        description:\n          'Returns `true` if the first argument is less than the second; `false`\\notherwise.',\n        resource: 'https://ramdajs.com/docs/#lt'\n      }\n    ]\n  },\n  {\n    type: 'relation',\n    action: 'know if a value is less than or equal to another',\n    func: [\n      {\n        name: 'lte',\n        notation: 'Ord a => a -> a -> Boolean',\n        description:\n          'Returns `true` if the first argument is less than or equal to the second;\\n`false` otherwise.',\n        resource: 'https://ramdajs.com/docs/#lte'\n      }\n    ]\n  },\n  {\n    type: 'relation',\n    action: 'know if a value is greater than another',\n    func: [\n      {\n        name: 'gt',\n        notation: 'Ord a => a -> a -> Boolean',\n        description:\n          'Returns `true` if the first argument is greater than the second; `false`\\notherwise.',\n        resource: 'https://ramdajs.com/docs/#gt'\n      }\n    ]\n  },\n  {\n    type: 'relation',\n    action: 'know if a value is greater than or equal to another',\n    func: [\n      {\n        name: 'gte',\n        notation: 'Ord a => a -> a -> Boolean',\n        description:\n          'Returns `true` if the first argument is greater than or equal to the second;\\n`false` otherwise.',\n        resource: 'https://ramdajs.com/docs/#gte'\n      }\n    ]\n  },\n  {\n    type: 'relation',\n    action: 'find the smallest of two values',\n    func: [\n      {\n        name: 'min',\n        notation: 'Ord a => a -> a -> a',\n        description: 'Returns the smaller of its two arguments.',\n        resource: 'https://ramdajs.com/docs/#min'\n      }\n    ]\n  },\n  {\n    type: 'relation',\n    action: 'find the smallest of two values based on custom logic',\n    func: [\n      {\n        name: 'minBy',\n        notation: 'Ord b => (a -> b) -> a -> a -> a',\n        description:\n          'Takes a function and two values, and returns whichever value produces the\\nsmaller result when passed to the provided function.',\n        resource: 'https://ramdajs.com/docs/#minBy'\n      }\n    ]\n  },\n  {\n    type: 'relation',\n    action: 'find the largest of two values',\n    func: [\n      {\n        name: 'max',\n        notation: 'Ord a => a -> a -> a',\n        description: 'Returns the larger of its two arguments.',\n        resource: 'https://ramdajs.com/docs/#max'\n      }\n    ]\n  },\n  {\n    type: 'relation',\n    action: 'find the largest of two values based on custom logic',\n    func: [\n      {\n        name: 'maxBy',\n        notation: 'Ord b => (a -> b) -> a -> a -> a',\n        description:\n          'Takes a function and two values, and returns whichever value produces the\\nlarger result when passed to the provided function.',\n        resource: 'https://ramdajs.com/docs/#maxBy'\n      }\n    ]\n  },\n  {\n    type: 'math',\n    action: 'increment a number by one',\n    func: [\n      {\n        name: 'inc',\n        notation: 'Number -> Number',\n        description: 'Increments its argument.',\n        resource: 'https://ramdajs.com/docs/#inc'\n      }\n    ]\n  },\n  {\n    type: 'math',\n    action: 'decrement a number by one',\n    func: [\n      {\n        name: 'dec',\n        notation: 'Number -> Number',\n        description: 'Decrements its argument.',\n        resource: 'https://ramdajs.com/docs/#dec'\n      }\n    ]\n  },\n  {\n    type: 'math',\n    action: 'add two numbers',\n    func: [\n      {\n        name: 'add',\n        notation: 'Number -> Number -> Number',\n        description: 'Adds two values.',\n        resource: 'https://ramdajs.com/docs/#add'\n      }\n    ]\n  },\n  {\n    type: 'math',\n    action: 'subtract one number from another',\n    func: [\n      {\n        name: 'subtract',\n        notation: 'Number -> Number -> Number',\n        description: 'Subtracts its second argument from its first argument.',\n        resource: 'https://ramdajs.com/docs/#subtract'\n      }\n    ]\n  },\n  {\n    type: 'math',\n    action: 'multiple two numbers',\n    func: [\n      {\n        name: 'multiply',\n        notation: 'Number -> Number -> Number',\n        description:\n          'Multiplies two numbers. Equivalent to `a * b` but curried.',\n        resource: 'https://ramdajs.com/docs/#multiply'\n      }\n    ]\n  },\n  {\n    type: 'math',\n    action: 'divide one number by another',\n    func: [\n      {\n        name: 'divide',\n        notation: 'Number -> Number -> Number',\n        description: 'Divides two numbers. Equivalent to `a / b`.',\n        resource: 'https://ramdajs.com/docs/#divide'\n      }\n    ]\n  },\n  {\n    type: 'math',\n    action: 'negate a number',\n    func: [\n      {\n        name: 'negate',\n        notation: 'Number -> Number',\n        description: 'Negates its argument.',\n        resource: 'https://ramdajs.com/docs/#negate'\n      }\n    ]\n  },\n  {\n    type: 'math',\n    action: 'divide one number by another and get the remainder',\n    func: [\n      {\n        name: 'modulo',\n        notation: 'Number -> Number -> Number',\n        description:\n          'Divides the first parameter by the second and returns the remainder. Note\\nthat this function preserves the JavaScript-style behavior for modulo. For\\nmathematical modulo see [`mathMod`](#mathMod).',\n        resource: 'https://ramdajs.com/docs/#modulo'\n      },\n      {\n        name: 'mathMod',\n        notation: 'Number -> Number -> Number',\n        description:\n          '`mathMod` behaves like the modulo operator should mathematically, unlike the\\n`%` operator (and by extension, [`R.modulo`](#modulo)). So while\\n`-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer\\narguments, and returns NaN when the modulus is zero or negative.',\n        resource: 'https://ramdajs.com/docs/#mathMod'\n      }\n    ]\n  }\n]\n","import React, { Fragment } from 'react'\nimport { render } from 'react-dom'\nimport { Global, css } from '@emotion/core'\nimport { HashRouter, Route } from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\n\nimport App from './App.jsx'\nimport data from './data'\nimport colors from './colors'\n\nconst normalize = css`\n  @import url('https://fonts.googleapis.com/css?family=IBM+Plex+Mono:400,600');\n\n  * {\n    box-sizing: border-box;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  html, body {\n    font-family: 'IBM Plex Mono', monospace;\n    margin: 0;\n    padding: 0;\n    font-size: 18px;\n    line-height: 1.7;\n    color: ${colors.black};\n  }\n\n  a {\n    color: ${colors.blue};\n    transition: 0.2s;\n\n    &:hover {\n      color: ${colors.black};\n    }\n  }\n`\n\nconst history = createBrowserHistory()\n\nrender(\n  <Fragment>\n    <Global styles={normalize}/>\n    <HashRouter history={history} hashType='noslash'>\n      <Route\n        path={'/:type?/:action?'}\n        render={props => <App data={data} {...props} />}\n      />\n    </HashRouter>\n  </Fragment>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}